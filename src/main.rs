///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
use std::{
	fs::File,
	error::Error,
	env::args,
	io::Read,
};
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#[derive(serde::Deserialize)]
struct Pool {
	common: Option<String>, // common dir
	files: Vec<String>,
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
fn main() -> Result<(), Box<dyn Error>> {
	let mut buffer = String::with_capacity(127);
	File::open(
		args()
			.nth(1)
			.map_or(Err("Argument Missing"), |path| Ok(nitrogen::to_path(path)))?
	)?
		.read_to_string(&mut buffer)?;
	let Pool { common , files } = toml::from_str::<Pool>(&buffer)?;
	let common = common.unwrap_or_default();
	let mut files = files
		.into_iter()
		.filter_map(|file| File::open(nitrogen::to_path(format!("{common}{}{file}", std::path::MAIN_SEPARATOR))).ok())
		.collect::<Vec<File>>();
	let mut generator = fastrand::Rng::new();
	for upper in (0..files.len()).rev() {
		rodio::OutputStream::try_default()?
			.1
			.play_once(files.remove(generator.usize(0..=upper)))?
			.sleep_until_end();
	}
	Ok(())
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
