///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
use thiserror::Error;
use std::{
	io::Error as IOError,
	time::Duration,
	env::VarError,
};
use lofty::LoftyError;
use rodio::{
	PlayError,
	decoder::DecoderError,
	StreamError,
};
use toml::de::Error as TOMLError;
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// A module for handling and interacting with external devices.
pub mod in_out;

/// A collection of file related structures, or implementations.
pub mod songs;

/// IDK man.
pub mod playback;

/// Implementation utilities.
pub mod utilities;
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Constant signal [`Duration`] (tick rate). [250 milliseconds]
///
/// Every time related operation is tackted after this constant.\
const TICK: Duration = Duration::from_millis(250);
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#[derive(Error, Debug)]
pub enum VectorError {
	#[error("Index out of bounds")]
	OutOfBounds,

	#[error("Empty vector encountered.")]
	EmptyVector,
}

#[derive(Error, Debug)]
pub enum UnwrapError {
	#[error("Invalid option version caught.")]
	InvalidOption,

	#[error("Channel disconnected.")]
	ChannelDisconnect,
}

#[derive(Error, Debug)]
pub enum Error {
	#[error("IO: {0}")]
	Io(#[from] IOError),

	#[error("Rodio-Decode: {0}")]
	Decode(#[from] DecoderError),
	#[error("Rodio-Play: {0}")]
	Play(#[from] PlayError),
	#[error("Rodio-Stream: {0}")]
	Stream(#[from] StreamError),

	#[error("Lofty: {0}")]
	Lofty(#[from] LoftyError),

	#[error("TOML: {0}")]
	Deserialise(#[from] TOMLError),

	#[error("Variable: {0}")]
	Variable(#[from] VarError),

	#[error("Vector: {0}")]
	Vector(#[from] VectorError),

	#[error("Unwrap: {0}")]
	Unwrap(#[from] UnwrapError),
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
